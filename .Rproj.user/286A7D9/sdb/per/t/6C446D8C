{
    "collab_server" : "",
    "contents" : "amap_key <- \"71b002162d43fea08afd5b5e31b030af\"\n#' get search API url\n#'\n#'\n#' search something from amap,you can see http://lbs.amap.com/api/webservice/guide/api/trafficstatus/#inputtips\n#'\n#'\n#' @param shape character:defalut NULL ,should be rectangle/circle/NULL\n#' @param location  character:location should be writtend like\n#' @param keywords should be 'json' or 'xml', the type of the result\n#' @param offset code of city.for examples fuzhou is 0591\n#' @param polygon polygon of location\n#' @param radius logical value, return the coordinates or the original results\n#' @param city character\n#' @param mapkey amap key\n#' @param extensions xml or json\n#' @param page num\n#' @return A vector contains description,expedite,congested,blocked,unkown\n#' @export  geturl0\n#' @examples\n#' \\dontrun{\n#'rectangel=matrix(c(119.117295,26.201212,119.649092,25.840692),byrow = T,nrow = 2)\n#'df_grid=setcoordMTX(rectangel=rectangel,grid=5000,sep=';')\n#'amap_key='71b002162d43fea08afd5b5e31b030af'\n#'url=geturl0(shape='polygon',polygon=df_grid[1,1],mapkey=amap_key,location=NULL,keywords='公交??<U+393C><U+3E39>')\n#'url=geturl0(shape='polygon',polygon=df_grid[1,1],mapkey=amap_key,location=NULL,keywords='公交站|公交车站')\n#'url=geturl0(shape='polygon',polygon=df_grid[1,1],mapkey=amap_key,location=NULL,keywords='道路',types='地名地址信息')\n#'  }\n\ngeturl0 <- function(page = 1, shape = \"around\", location = \"116.456299,39.960767\",\n    keywords = NULL, offset = 25, polygon = NULL, radius = 2000, city = NULL,\n    mapkey = \"71b002162d43fea08afd5b5e31b030af\", types = \"地名地址信息\",\n    extensions = \"base\") {\n    url_head <- \"http://restapi.amap.com/v3/place/\"\n    if (shape == \"text\") {\n        if (length(city) == 0) {\n            url <- paste(url_head, \"text?&keywords=\", keywords, \"&output=xml&offset=\",\n                offset, \"&page=\", page, \"&key=\", mapkey, \"&extensions=\",\n                extensions, \"&location=\", location, \"&types=\", types, sep = \"\")\n        } else {\n            url <- paste(url_head, \"text?&keywords=\", keywords, \"&city=\",\n                city, \"&output=xml&offset=\", offset, \"&page=\", page, \"&key=\",\n                mapkey, \"&extensions=\", extensions, \"&types=\", types, sep = \"\")\n        }\n\n    } else if (shape == \"around\") {\n        url <- paste(url_head, \"around?&keywords=\", keywords, \"&output=xml&offset=\",\n            offset, \"&page=\", page, \"&key=\", mapkey, \"&extensions=\", extensions,\n            \"&location=\", location, \"&types=\", types, sep = \"\")\n    } else if (shape == \"polygon\") {\n        url <- paste(url_head, \"polygon?&keywords=\", keywords, \"&city=\",\n            city, \"&output=xml&offset=\", offset, \"&page=\", page, \"&key=\",\n            mapkey, \"&extensions=\", extensions, \"&polygon=\", polygon, \"&types=\",\n            types, sep = \"\")\n    } else {\n        cat(\"shape must in text around polygon\", \"\\n\")\n    }\n    return(url)\n}\n\n#' search something from amap\n#'\n#'\n#' search something from amap,you can see http://lbs.amap.com/api/webservice/guide/api/trafficstatus/#inputtips\n#'\n#'\n#' @param shape character:defalut NULL ,should be rectangle/circle/NULL\n#' @param location  character:location should be writtend like\n#' @param keywords should be 'json' or 'xml', the type of the result\n#' @param offset code of city.for examples fuzhou is 0591\n#' @param polygon polygon of location\n#' @param radius logical value, return the coordinates or the original results\n#' @param city character\n#' @param key amap key\n#' @param extensions xml or json\n#' @return A vector contains description,expedite,congested,blocked,unkown\n#' @export  getSearch\n#' @importFrom xml2 read_html\n#' @importFrom rvest html_nodes\n#' @importFrom rvest html_text\n#' @importFrom rvest %>%\n#' @examples\n#' \\dontrun{\n#'rectangel=matrix(c(118.784364,26.478515,119.892801,25.436929),byrow = T,nrow = 2) #big\n#'rectangel=matrix(c(119.117295,26.201212,119.649092,25.840692),byrow = T,nrow = 2) #saml\n#'df_grid=setcoordMTX(rectangel=rectangel,grid=2000,sep=';')\n#' }\n\n\n\n\ngetSearch <- function(shape = \"polygon\", location = \"116.456299,39.960767\",\n    keywords = NULL, offset = 25, polygon = NULL, radius = 10000, city = NULL,\n    key = amap_key, extensions = \"base\", types =\"地名地址信息\") {\n\n    url_tmp <- geturl0(page = 0, shape, location, keywords, offset, polygon,\n        radius, city, mapkey = key, types=types)\n    web <- read_html(url_tmp, encoding = \"utf-8\")\n    info <- web %>% html_nodes(\"info\") %>% html_text()\n    # if(info==\"DAILY_QUERY_OVER_LIMIT\"){\n    #         amap_key <- \"71b002162d43fea08afd5b5e31b030af\"\n    # }\n    count <- web %>% html_nodes(\"count\") %>% html_text()\n    if (length(count) > 0) {\n        count <- as.numeric(web %>% html_nodes(\"count\") %>% html_text())\n        pagenum <- ceiling(count/offset)\n        tmp <- data.frame(matrix(rep(NA,6), ncol = 6))\n        colnames(tmp) <- c(\"id\",\"name\", \"location\", \"address\",\"cityname\",\"adname\")\n        for (i in 1:pagenum) {\n            url_tmp <- geturl0(page = i, shape, location, keywords, offset,\n                polygon, radius, city, mapkey = key,types = types)\n            web <- read_html(url_tmp, encoding = \"utf-8\")\n            df <- data.frame(\n                    id=web %>% html_nodes(\"id\") %>% html_text(),\n                    name = web %>% html_nodes(\"name\") %>% html_text(),\n                location = web %>% html_nodes(\"location\") %>% html_text(),\n                address = web %>% html_nodes(\"address\") %>% html_text(),\n                cityname = web %>% html_nodes(\"cityname\") %>% html_text(),\n                adname = web %>% html_nodes(\"adname\") %>% html_text(),\n                stringsAsFactors = F)\n            tmp <- rbind(tmp, df)\n        }\n        tmp <- tmp[-1, ]\n    } else {\n        tmp <- data.frame(matrix(rep(NA, 6), ncol = 6))\n        colnames(tmp) <- c(\"id\",\"name\", \"location\", \"address\",\"cityname\",\"adname\")\n    }\n\n\n    return(tmp)\n\n}\n\n\n#' search something from amap\n#'\n#'\n#' search something from amap,you can see http://lbs.amap.com/api/webservice/guide/api/trafficstatus/#inputtips\n#'\n#'\n#' @param mtx character:defalut NULL ,should be rectangle/circle/NULL\n#' @param grid  character:location should be writtend like\n#' @param word should be 'json' or 'xml', the type of the result\n#' @param Tobaidu code of city.for examples fuzhou is 0591\n#' @export  getSearchPlus\n#' @importFrom xml2 read_html\n#' @importFrom rvest html_nodes\n#' @importFrom rvest html_text\n#' @importFrom rvest %>%\ngetSearchPlus <- function(mtx, grid = 5000, word = \"bicycle\", Tobaidu = T,\n    types = \"地名地址信息\") {\n    df_grid <- setcoordMTX(rectangel = mtx, grid, sep = \";\")\n    # print(df_grid)\n    df <- data.frame(matrix(rep(NA, 6), nrow = 1))\n    colnames(df) <- c(\"id\",\"name\", \"location\", \"address\",\"cityname\",\"adname\")\n    for (i in 1:length(df_grid)) {\n         #print(i)\n        for (j in 1:length(df_grid)) {\n            df_tmp <- getSearch(shape = \"polygon\", polygon = df_grid[i,\n                j], key = amap_key, keywords = word, types=types)\n            df <- rbind(df, df_tmp)\n             #print(j)\n        }\n    }\n    df <- na.omit(df)\n    df <- df[!duplicated(df), ]\n    if(nrow(df)>0){\n            a <- unlist(strsplit(df$location, split = \",\"))\n            df$lon <- a[seq(1, length(a), 2)]\n            df$lat <- a[seq(2, length(a), 2)]\n            if (Tobaidu) {\n                    df_baidu <- geoconv(df[, c(\"lon\", \"lat\")])\n                    df$lon <- df_baidu[, 1]\n                    df$lat <- df_baidu[, 2]\n            }\n    }\n\n    return(df)\n}\n\n\n\n\n\n\n\n",
    "created" : 1483965856476.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3714428541",
    "id" : "6C446D8C",
    "lastKnownWriteTime" : 1483965867,
    "last_content_update" : 1483965867922,
    "path" : "C:/Users/dai_jl/Desktop/bamapr/R/getSearch.R",
    "project_path" : "R/getSearch.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}