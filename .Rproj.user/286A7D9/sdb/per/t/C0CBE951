{
    "collab_server" : "",
    "contents" : "#' get bus station and coordinate id from amap\n#'\n#'\n#' gived bus route'name and city num code,will get the bus station with\n#' id/name/coordinate/direction/bus sequence from amap\n#'\n#'\n#' @param citycode city num code which can be found in amap api web\n#' @param keywords bus route'name\n#' @param gettime  bus start time and end time\n#' @param getcoord bus route path coordinate\n#' @param verbose  default be F\n#' @return a data.frame with  id/name/coordinate/direction/bus sequence\n#' @export  getBusRoute\n#' @importFrom RCurl getURL\n#' @importFrom curl curl_escape\n#' @examples\n#' \\dontrun{\n#' x=getBusRoute(keywords=\"38è·¯\")\n#' }\n#'\n#'\n\ngetBusRoute <- function(citycode = 350100,keywords = \"38\",gettime=F,getcoord=F,verbose=F) {\n        myheader <- c(`User-Agent` = \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0\",\n                      Accept = \"*/*\", `Accept-Language` = \"zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\",\n                      Connection = \"keep-alive\", `Accept-Charset` = \"GB2312,utf-8;q=0.7,*;q=0.7\")\n        keyword_url <- curl_escape(keywords)\n        url_head <- \"http://ditu.amap.com/service/poiInfo?query_type=TQUERY&qii=true&city=\"\n        url <- paste(url_head, citycode, \"&keywords=\", keyword_url, sep = \"\")\n        web <- getURL(url, encoding = \"utf-8\", httpHeader = myheader, verbose = verbose)\n        a <- unlist(strsplit(web, split = \"(\\\\},\\\\{)\"))\n        index <- grep(a, pattern = \"name\")\n        a <- a[index]\n        df <- data.frame(matrix(rep(NA, length(a) * 6), ncol = 6))\n        colnames(df) <- c(\"ID\", \"lat\", \"lng\", \"stationname\", \"num\", \"direction\")\n        for (i in 1:length(a)) {\n                b <- unlist(strsplit(a[i], split = \"[\\\"+\\\\[\\\\{:,]\"))\n                c0 <- unlist(strsplit(b, split = \"\\\\}\"))\n                d <- c0[grep(c0, pattern = \"id\"):length(c0)][c(2, 5, 7, 9, 11)]\n                df[i, ] <- c(d, -1)\n                # print(i)\n        }\n        index <- grep(df$num, pattern = \"[a-zA-Z]\")\n        df$direction[1:(index[1] - 1)] <- 1\n        df <- df[-index, ]\n        df$name <- keywords\n\n\n        if(gettime){\n                d=c()\n                for(i in 2:5){\n                        a <- unlist(strsplit(web,split=\"start_time|end_time\"))\n                        b <- unlist(strsplit(a[i],split = \",\"))[1]\n                        c0 <- unlist(strsplit(b,'\"'))[3]\n                        d=c(d,c0)\n                }\n                df1=data.frame(matrix(d,ncol=2,byrow=T))\n                colnames(df1)=c(\"starttime\",\"endtime\")\n                df1$name=keywords\n                df1$direction=c(1,-1)\n        }\n        if(getcoord){\n                a <- unlist(strsplit(web,split=\"path\"))\n                g=c()\n                for(i in 2:3){\n                        b <- unlist(strsplit(a[i],split = \",\"))\n                        c0 <- gsub(pattern = '[a-zA-Z\\\\{\\\\}:\\\\\\\\\"]',\n                                   replacement = \"\",x = b)\n                        index=which(nchar(c0)==0)[1]-1\n                        d=c0[1:index]\n                        e <- gsub(pattern = \"\\\\]?\\\\[+\",replacement = \"\",x = d)\n                        f <- paste(e,collapse = \",\")\n                        g=c(g,f)\n                }\n                df2=data.frame(path=g,stringsAsFactors = F)\n                df2$name=keywords\n                df2$direction=c(1,-1)\n\n        }\n        if(gettime&&getcoord){\n           a <- list(df,df1,df2)\n\n        }else if(gettime){\n            a <- list(df,df1)\n\n        }else if(getcoord){\n             a <- list(df,df2)\n        }else{\n                a <- df\n        }\n        return(a)\n}",
    "created" : 1483965428436.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3117048466",
    "id" : "C0CBE951",
    "lastKnownWriteTime" : 1483954940,
    "last_content_update" : 1483954940,
    "path" : "C:/Users/dai_jl/Desktop/bamapr/R/getBusRoute.R",
    "project_path" : "R/getBusRoute.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}